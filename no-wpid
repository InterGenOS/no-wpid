#!/bin/bash
# ----------------------------------------------------------------------------------------------------
# no-wpid: simple script to null/enable WordPress readme.html and license.txt files on a cPanel server
# no-wpid Version: 1.0
# Github: https://github.com/InterGenStudios/no-wpid
# ---------------------------------------------------
# InterGenStudios: 5-12-15
# Copyright (c) 2015: Christopher 'InterGen' Cork  InterGenStudios
# URL: https://intergenstudios.com
# --------------------------------
# License: GPL-2.0+
# URL: http://opensource.org/licenses/gpl-license.php
# ---------------------------------------------------
# no-wpid is free software:
# You may redistribute it and/or modify it under the terms of the
# GNU General Public License as published by the Free Software
# Foundation, either version 2 of the License, or (at your discretion)
# any later version.
# ------------------

#############################################
##-----------------------------------------##
## BEGIN - MAKE SURE WE'RE RUNNING AS ROOT ##
##-----------------------------------------##
#############################################

if [ "$(id -u)" != "0" ]; then
    tput bold
    tput setaf 1
    printf "\n\n"
    echo "--------"
    echo "WARNING!"
    echo "--------"
    echo
    tput sgr0
    echo "no-wpid must be run as root!"
    echo "(Exiting now...)"
    printf "\n\n"
    exit 1
fi

###########################################
##---------------------------------------##
## END - MAKE SURE WE'RE RUNNING AS ROOT ##
##---------------------------------------##
###########################################

#######################
##-------------------##
## BEGIN - FUNCTIONS ##
##-------------------##
#######################

# Colors trailing text Red
RED () {
    tput bold
    tput setaf 1
}

# Colors trailing text Green
GREEN () {
    tput bold
    tput setaf 2
}

# Colors trailing text Yellow
YELLOW () {
    tput bold
    tput setaf 3
}

# Colors trailing text Blue
BLUE () {
    tput bold
    tput setaf 4
}

# Clears any preceding text color declarations
WHITE () {
tput sgr0
}

# Simple divider
SEPARATOR () {
GREEN
echo
echo "----------------------------"
echo
WHITE
}

# Simple divider
SEPARATOR_WHITE () {
WHITE
echo "------------------------------------------------------------------"
}

# Creates uniform look during script execution when called after any clear command
HEADER () {
echo
BLUE
echo "============================================================================"
WHITE
echo "  no-wpid v1.0"
BLUE
echo "============================================================================"
WHITE
printf "\n\n"
}

# Blocks readme.html and license.txt files in WordPress installations
BLOCK () {
    if [ -f /home/"$USR"/public_html/readme.html ]; then
        clear
        HEADER
        BLUE
        printf "Checking for WordPress Identifiers in account "
        WHITE
        printf "\"$USR\"\n"
        for identifier in $(find /home/"$USR"/public_html -type f -name "LICENSE.*" -o -name "license.*" -o -name "readme.*" -o -name "README.*"); do 
            chown nobody:nobody "$identifier" && chmod 000 "$identifier" && echo "$USR" >> userlist
        done
    else
        clear
        HEADER
        BLUE
        printf "Checking for WordPress Identifiers in account "
        WHITE
        printf "\"$USR\"\n"
        echo "$USR" >> noidfoundlist
    fi
    clear
    HEADER
    BLUE
    echo "Wordpress Identifiers blocked for account(s):"
    echo
    WHITE
    cat userlist | uniq
    SEPARATOR
    if [ -e noidfoundlist ]; then
        echo "No readme.* or license.* files found for account(s):"
        echo
        WHITE
        cat noidfoundlist | uniq
    fi
    printf "\n\n"
    WHITE
}

# Unblocks readme.html and license.txt files in WordPress installatins (to allow for upgrading)
UNBLOCK () {
    if [ -f /home/"$USR"/public_html/readme.html ]; then
        clear
        HEADER
        BLUE
        printf "Checking for WordPress Identifiers in account "
        WHITE
        printf "\"$USR\"\n"
        echo
        for identifier in $(find /home/"$USR"/public_html -type f -name "LICENSE.*" -o -name "license.*" -o -name "readme.*" -o -name "README.*"); do
            chown "$USR":"$USR" "$identifier" && chmod 644 && "$identifier" && echo "$USR" >> userlist
        done
    else
        clear
        HEADER
        BLUE
        printf "Checking for WordPress Identifiers in account "
        tput sgr0
        printf "\"$USR\"\n"
        echo "$USR" >> noidfoundlist
    fi
    clear
    HEADER
    BLUE
    echo "Wordpress Identifiers unblocked for account(s):"
    echo
    WHITE
    cat userlist | uniq
    SEPARATOR
    if [ -e noidfoundlist ]; then
        echo "No readme.* or license.* files found for account(s):"
        echo
        WHITE
        cat noidfoundlist | uniq
    fi
    printf "\n\n"
    WHITE
}

# Routes for all users
ALL_USERS () {
clear
HEADER
GREEN
echo "Which operation are we performing?"
echo
echo " 1) Blocking"
echo
echo " 2) Unblocking"
echo
WHITE
echo -n "[enter selection]: "
read CHOICE
    case $CHOICE in
        1) for USR in $(grep \: /etc/trueuserdomains | grep -v nobody | awk '{print $2}' | uniq); do
            if [ -f /home/"$USR"/public_html/readme.html ]; then
                clear
                HEADER
                BLUE
                printf "Checking for WordPress Identifiers in account "
                WHITE
                printf "\"$USR\"\n"
                for identifier in $(find /home/"$USR"/public_html -type f -name "LICENSE.*" -o -name "license.*" -o -name "readme.*" -o -name "README.*"); do 
                    chown nobody:nobody "$identifier" && chmod 000 "$identifier" && echo "$USR" >> userlist
                done
            else
                clear
                HEADER
                BLUE
                printf "Checking for WordPress Identifiers in account "
                WHITE
                printf "\"$USR\"\n"
                echo "$USR" >> noidfoundlist
            fi
           done
        clear
        HEADER
        BLUE
        echo "Wordpress Identifiers blocked for account(s):"
        echo
        WHITE
        cat userlist | uniq
        SEPARATOR
        if [ -e noidfoundlist ]; then
            YELLOW
            echo "No readme.* or license.* files found for account(s):"
            echo
            WHITE
            cat noidfoundlist | uniq
        fi
        printf "\n\n"
        WHITE;;
        2) for USR in $(grep \: /etc/trueuserdomains | grep -v nobody | awk '{print $2}' | uniq); do
            if [ -f /home/"$USR"/public_html/readme.html ]; then
                clear
                HEADER
                BLUE
                printf "Checking for WordPress Identifiers in account "
                WHITE
                printf "\"$USR\"\n"
                echo
                for identifier in $(find /home/"$USR"/public_html -type f -name "LICENSE.*" -o -name "license.*" -o -name "readme.*" -o -name "README.*"); do
                    chown "$USR":"$USR" "$identifier" && chmod 644 && "$identifier" && echo "$USR" >> userlist
                done
            else
                clear
                HEADER
                BLUE
                printf "Checking for WordPress Identifiers in account "
                tput sgr0
                printf "\"$USR\"\n"
                echo "$USR" >> noidfoundlist
            fi
           done
        clear
        HEADER
        BLUE
        echo "Wordpress Identifiers unblocked for account(s):"
        echo
        WHITE
        cat userlist | uniq
        SEPARATOR
        if [ -e noidfoundlist ]; then
            YELLOW
            echo "No readme.* or license.* files found for account(s):"
            echo
            WHITE
            cat noidfoundlist | uniq
        fi
        printf "\n\n"
        WHITE;;
    esac
}

# Routes for single users
SINGLE_USER () {
NC='^[0-9]+$'
clear
HEADER
GREEN
echo "Which account are we adjusting WordPress Identifiers for? "
SEPARATOR
WHITE
grep \: /etc/trueuserdomains | grep -v nobody | awk '{print $2}' | uniq > accountlist
sed = accountlist | sed 'N;s/\n/\t/' > accountchoices
cat accountchoices
echo
SEPARATOR
WHITE
echo -n "Select account [q for quit]? "
read ACCOUNT_CHOICE
if [ "$(echo "$ACCOUNT_CHOICE")" = "Q" ] || [ "$(echo "$ACCOUNT_CHOICE")" = "q" ]; then
    printf "\n\n"
    RED
    echo "Quiting..."
    rm -rf accountlist accountchoices
    WHITE
    sleep 1
    clear
    exit 0
else
    # Loop the script if an invalid choice is given
    if ! [[ $ACCOUNT_CHOICE =~ $NC ]]; then
        echo
        RED
        echo "\"$ACCOUNT_CHOICE\" is not a valid selection."
        echo
        echo "Restarting..."
        sleep 2
        SINGLE_USER
    else
        # Setting 1st match (-m 1) ensures $ doesn't confuse grep when there's also $$, $$$, $$$$, etc
        USR="$(grep -m 1 "$ACCOUNT_CHOICE" accountchoices | awk '{print $2}')"
        rm -rf accountlist accountchoices
        if [ "$USR" != "$(grep "$USR" /etc/passwd | cut -d ':' -f 1)" ]; then
            clear
            HEADER
            WHITE
            printf "\"$USR\""
            RED
            printf " isn't a valid user on this server, Sparky... run it again...\n"
            echo
            SEPARATOR
            sleep 2
            SINGLE_USER
        else
            clear
            HEADER
            GREEN
            echo "Which operation are we performing?"
            echo
            echo " 1) Blocking"
            echo
            echo " 2) Unblocking"
            echo
            WHITE
            echo -n "[enter selection]:"
            read CHOICE
                case $CHOICE in
                    1) BLOCK;;
                    2) UNBLOCK;;
                esac
        fi
    fi
fi
}

#####################
##-----------------##
## END - FUNCTIONS ##
##-----------------##
#####################

#########################
##---------------------##
## BEGIN - CORE SCRIPT ##
##---------------------##
#########################

clear
HEADER
GREEN
echo
printf "Are we adjusting WordPress Identifiers for the entire server "
WHITE
echo -n "[y/n]? "
old_stty_cfg=$(stty -g)
stty raw -echo
answer="$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )"
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
    echo
    ALL_USERS
    if [ -f userlist ]; then
        rm -rf userlist
    fi
    if [ -f noidfoundlist ]; then
        rm -rf noidfoundlist
    fi
    printf "\n\n"
    exit 0
else
    echo
    SINGLE_USER
    if [ -f userlist ]; then
        rm -rf userlist
    fi
    if [ -f noidfoundlist ]; then
        rm -rf noidfoundlist
    fi
fi
exit 0

#######################
##-------------------##
## END - CORE SCRIPT ##
##-------------------##
#######################